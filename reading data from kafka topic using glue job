import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from pyspark.sql.functions import *
from pyspark.sql import functions as F
import json
# import boto3
# import os
from pyspark.sql import DataFrame, Row
from pyspark.sql.functions import col, isnan, when, trim
import datetime     
from awsglue import DynamicFrame

args = getResolvedOptions(sys.argv, ["JOB_NAME","msktopic","mskconnection"])
glueContext = GlueContext(SparkContext.getOrCreate())
spark = glueContext.spark_session
job = Job(glueContext)
logger = glueContext.get_logger()
kafka_conn=args['mskconnection']
topic_name=args['msktopic']

# Script generated for node Kafka Stream
dataframe_KafkaStream_node1 = glueContext.create_data_frame.from_options(
    connection_type="kafka",
    connection_options={
        "connectionName": kafka_conn, #kafka_conn is kafka connection created in aws glue data connections and attach that kafka connection in job deatils of glue job
        "classification": "json",
        "startingOffsets": "earliest",
        "topicName": topic_name, # give your topic name
        "inferSchema": "true",
        "typeOfData": "kafka",
        "failOnDataLoss": "false",
    },
    transformation_ctx="dataframe_KafkaStream_node1",
)

def processBatch(dynamic_frame, batchId):
    print("processBatch function is getting executed")
    if dynamic_frame.count() > 0:
        KafkaStream_node1 = DynamicFrame.fromDF(dynamic_frame, glueContext, "from_data_frame")
        cur_dataframedf=KafkaStream_node1.toDF()
    else:
        logger.info("No data in coming batch")





glueContext.forEachBatch(
    frame=dataframe_KafkaStream_node1, #kafka batch data
    batch_function=processBatch, # calling function
    options={
        "windowSize": "100 seconds",
        "checkpointLocation": args["TempDir"] + "/" + args["JOB_NAME"] + "/checkpoint/",
    },
)
